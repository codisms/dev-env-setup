
SUDO=$(which sudo 2> /dev/null)
HEADER_LEADER=-

printHeader() {
	HEADER_LEADER=$2
	echo
	echo -e "\e[35m-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\e[0m"
	echo -e "\e[35m${1}\e[0m"
	echo
}

printSubHeader() {
	echo
	echo -e "\e[36m-----------------------------------------------------------------------------------------------------------\e[0m"
	echo -e "\e[36m${HEADER_LEADER}: ${1}\e[0m"
	echo
}

resetPermissions() {
	printSubHeader "Reseting permissions (${USER}:${USER})"
	$SUDO chown -R ${USER}:${USER} ${HOME}
	[ -d ${HOME}/web ] && $SUDO chown -R apache:apache ${HOME}/web || true
	#echo -e "\e[33mSkipping resetting of permissions\e[0m"
}

scheduleForNextRun() {
	echo "Scheduling $1 to run at ${HOME}/.onstart..."
	echo "$1" > ${HOME}/.onstart
#	echo -e "\e[35m-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\e[0m"
#	cat ${HOME}/.profile
#	echo -e "\e[35m-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\e[0m"
#	ls -la ${HOME}
#	echo -e "\e[35m-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\e[0m"
}

failRetry() {
	echo $1 >&2
	exit 1
}

retry() {
	local n=1
	# retry for 10 seconds at 2-second intervals
	local max=5
	local delay=2
	while true; do
		"$@" && break || {
			if [[ $n -lt $max ]]; then
				((n++))
				echo "!!! Command failed. Attempt $n/$max; sleeping for ${delay}s !!!"
				sleep $delay;
			else
				failRetry "!!! The command has failed after $n attempts !!!"
			fi
		}
	done
}

retry_long() {
	local n=1
	# retry for 5 minutes at 10-second intervals
	local max=30
	local delay=10
	while true; do
		"$@" && break || {
			if [[ $n -lt $max ]]; then
				((n++))
				echo "!!! Command failed. Attempt $n/$max; sleeping for ${delay}s !!!"
				sleep $delay;
			else
				fail "!!! The command has failed after $n attempts !!!"
			fi
		}
	done
}

cleanBoot() {
	#if [ -f ${HOME}/.execute_onstart ]; then
	#	rm -rf ${HOME}/.execute_onstart
	#fi
	#if [ -f ${HOME}/.onstart ]; then
	#	rm -rf ${HOME}/.onstart
	#fi
#	if [ -f ${HOME}/.bash_profile ]; then
#		mv ${HOME}/.bash_profile ${HOME}/.bash_profile.disabled
#	fi

	#if [ -f ${HOME}/.profile ]; then
	#	sed -i '/\. ~\/\.execute_onstart/d' ${HOME}/.profile
	#fi

	reloadEnvironment
	#echo "PATH=${PATH}" >> ${HOME}/.bashrc
	if [ ! -f ${HOME}/.bashrc ]; then
		echo ". ${HOME}/.profile" > ${HOME}/.bashrc
	fi
}

reloadEnvironment() {
	set +e
	if [ -f /etc/profile ]; then
		source /etc/profile
	fi
	if [ -f ${HOME}/.profile ]; then
		source ${HOME}/.profile
	fi
	set -e
}

CMD_ARGS=()
declare -A CMD_OPTIONS
for arg in "$@"; do
	#echo -- arg = ${arg} ------------------------------
	if [ "${arg:0:2}" == "--" ]; then
		arg="${arg:2}"
		#echo ${arg}
		key=$arg
		val=1
		if [[ "$arg" =~ .*=.* ]]; then
			IFS='=' read -r -a array <<< "${arg}"
			key="${array[0]}"
			val="${array[1]}"
		fi
		CMD_OPTIONS[${key}]="${val}"
	else
		CMD_ARGS+=("${arg}")
	fi
done
unset arg
unset key
unset val

function option_value() {
	echo "${CMD_OPTIONS[$1]}"
}
#   VAL=$(option_value KEY)

function option_set() {
	if [ "${CMD_OPTIONS[$1]}" != "" ] && [ ${CMD_OPTIONS[$1]} -eq 1 ]; then
		echo 1
	else
		echo 0
	fi
}
#   IS_SET=$(option_set KEY)
#   if [ $IS_SET -eq 1 ]; then

function get_package_manager() {
	local PACKAGE_MANAGER=
	case "$OSTYPE" in
		solaris*) PACKAGE_MANAGER=solaris ;;
		linux*)
			if [ -f /etc/centos-release ]; then
				PACKAGE_MANAGER=yum
			elif [ -n "$(command -v apt-get)" ]; then
				PACKAGE_MANAGER=apt
			elif [ -n "$(command -v yum)" ]; then
				PACKAGE_MANAGER=yum
			fi

			if [ "${PACKAGE_MANAGER}" == "" ]; then
				echo "Unable to find yum or apt-get!"
			fi
			;;
		darwin*) PACKAGE_MANAGER=darwin ;;
		bsd*) PACKAGE_MANAGER=bsd ;;
	esac
	echo "${PACKAGE_MANAGER}"
}

function debug() {
	if [ $DEBUG -eq 1 ]; then
		echo -e "\e[3;90m$@\e[0m"
	fi
}

function notice() {
	echo -e "\e[31;5m$@\e[0m"
}
